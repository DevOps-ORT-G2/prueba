# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
#- master

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'

pool:
  vmImage: ubuntu-latest

##########################################################
# Realizamos análisis de código estático con SonarCloud
##########################################################
#- task: SonarCloudPrepare@1
#  displayName: Configurar SonarCloud
#  inputs:
#    SonarCloud: 'sonarcloud'
#    organization: 'devops-ort-g2'
#    scannerMode: 'Other'
#    projectKey: 'DevOps-ORT-G2_products-service'
#/
#- script: mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=DevOps-ORT-G2_products-service
#  displayName: 'Ejecutar análisis de SonarCloud'

#- task: SonarCloudPublish@1
#  displayName: Publicar resultado de análisis SonarCloud
#  inputs:
#    pollingTimeoutSec: '300'
#
##########################################################
# Chequear status del análisis de SonarCloud
# Si falló no continua el pipeline
##########################################################

#- task: sonarcloud-buildbreaker@2
#  displayName: Check PASSED SonarCloud 
#  inputs:
#    SonarCloud: 'sonarcloud'
#    organization: 'devops-ort-g2'

##########################################################
# Buildeamos el JAR
##########################################################

#- script: mvn install
#  displayName: Generar build del jar

- task: Maven@4
  displayName: Generar build del jar
  inputs:
    mavenPomFile: 'pom.xml'
    publishJUnitResults: false
    javaHomeOption: 'JDKVersion'
    mavenVersionOption: 'Default'
    mavenAuthenticateFeed: false
    effectivePomSkip: false
    sonarQubeRunAnalysis: false

#################################################################################################
# Previo a crear la imagen de docker
# Aprovisionamos un api gateway para tener un unico punto de acceso para las pruebas postman
# Levantamos este docker primero para siempre tener misma IP y dejar seteado en postman
#################################################################################################

#- script: |
#    conf="upstream products {
#      server 172.17.0.3:8080;
#    }
    
#    server {
#      access_log /var/log/nginx/api_access.log main; # Each API may also log to a separate file
    
#      listen 80;
#      server_name _;
    
#      location /products {
#        proxy_pass http://products/products/;
#      }
#    }";
#    docker pull nginx:1.21
#    mkdir nginx-conf
#    echo "$conf" > nginx-conf/api_gateway.conf
#    cat nginx-conf/api_gateway.conf
#    docker run --name api-gateway -v /home/vsts/work/1/s/nginx-conf/:/etc/nginx/conf.d/ -d nginx:1.21
    
#  displayName: 'Aprovisionar API GATEWAY'

#- script: docker inspect api-gateway | grep '"IPAddress":' -A 0 -m 1 | cut -f4 -d'"' 
#  displayName: Consultar ip del docker api-gateway


#########################################################################################
# Buildeamos imagen docker del MS y levantamos para realizar pruebas con postman
#########################################################################################

- task: Docker@1
  displayName: Realizar build de imagen docker
  inputs:
    command: 'Build an image'
    dockerFile: '**/Dockerfile'
    arguments: '--build-arg JAR_FILE=target/products-service-example-0.0.1-SNAPSHOT.jar'
    imageName: 'products-service'

- script: docker run -d --name products-service-test products-service
  displayName: Levantar docker 

#- script: docker inspect products-service-test | grep '"IPAddress":' -A 0 -m 1 | cut -f4 -d'"' 
#  displayName: Obtener ip del docker MS

#- script: docker ps -a
#  displayName: Verificar dockers levantados

#########################################################################################
# Ejecutamos pruebas con newman desde un docker
#########################################################################################
#
#- script: docker run -t postman/newman:alpine run "https://api.postman.com/collections/7660732-00c5eb61-5cbe-4097-a366-2876c2b14c27?access_key=PMAT-01GJVHJH8EZFQXZFVS65GYC8WM" 
#  displayName: Ejecutar test Postman
#
#- script: | 
#    content=$(curl -L http://172.17.0.3/products/)
#    echo $content
#  displayName: prueba curl


    
##########################################################
# Pusheamos la imagen de docker al ECR
##########################################################
#- task: ECRPushImage@1
#  inputs:
#    awsCredentials: 'AWS'
#    regionName: 'us-east-1'
#    imageSource: 'imagename'
#    sourceImageName: 'products-service'
#    repositoryName: 'products-service'

- task: ECRPushImage@1
  inputs:
    awsCredentials: 'AWS'
    regionName: 'us-east-1'
    imageSource: 'imageid'
    sourceImageId: 'products-service'
    repositoryName: 'micro-servicios'
    autoCreateRepository: true
    forceDockerNamingConventions: true